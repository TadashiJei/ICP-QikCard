import { Prisma } from '@prisma/client';
import { PrismaService } from '../prisma/prisma.service';
import { CreateDeviceDto } from './dto/create-device.dto';
import { UpdateDeviceDto } from './dto/update-device.dto';
export declare class DevicesService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    private parseConfiguration;
    create(dto: CreateDeviceDto): Prisma.Prisma__QikPointDeviceClient<{
        name: string;
        status: import("@prisma/client").$Enums.DeviceStatus;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        eventId: string | null;
        deviceType: import("@prisma/client").$Enums.DeviceType;
        deviceId: string;
        locationName: string;
        locationLat: number | null;
        locationLng: number | null;
        firmwareVersion: string;
        batteryLevel: number;
        signalStrength: number;
        isOnline: boolean;
        ownerId: string;
        configuration: Prisma.JsonValue;
        lastSeen: Date;
        healthData: Prisma.JsonValue | null;
    }, never, import("@prisma/client/runtime/library").DefaultArgs, Prisma.PrismaClientOptions>;
    findAll(filters?: {
        ownerId?: string;
        eventId?: string;
    }): Prisma.PrismaPromise<{
        name: string;
        status: import("@prisma/client").$Enums.DeviceStatus;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        eventId: string | null;
        deviceType: import("@prisma/client").$Enums.DeviceType;
        deviceId: string;
        locationName: string;
        locationLat: number | null;
        locationLng: number | null;
        firmwareVersion: string;
        batteryLevel: number;
        signalStrength: number;
        isOnline: boolean;
        ownerId: string;
        configuration: Prisma.JsonValue;
        lastSeen: Date;
        healthData: Prisma.JsonValue | null;
    }[]>;
    findByOwner(ownerId: string): Prisma.PrismaPromise<{
        name: string;
        status: import("@prisma/client").$Enums.DeviceStatus;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        eventId: string | null;
        deviceType: import("@prisma/client").$Enums.DeviceType;
        deviceId: string;
        locationName: string;
        locationLat: number | null;
        locationLng: number | null;
        firmwareVersion: string;
        batteryLevel: number;
        signalStrength: number;
        isOnline: boolean;
        ownerId: string;
        configuration: Prisma.JsonValue;
        lastSeen: Date;
        healthData: Prisma.JsonValue | null;
    }[]>;
    findByEvent(eventId: string): Prisma.PrismaPromise<{
        name: string;
        status: import("@prisma/client").$Enums.DeviceStatus;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        eventId: string | null;
        deviceType: import("@prisma/client").$Enums.DeviceType;
        deviceId: string;
        locationName: string;
        locationLat: number | null;
        locationLng: number | null;
        firmwareVersion: string;
        batteryLevel: number;
        signalStrength: number;
        isOnline: boolean;
        ownerId: string;
        configuration: Prisma.JsonValue;
        lastSeen: Date;
        healthData: Prisma.JsonValue | null;
    }[]>;
    findOne(id: string): Promise<{
        name: string;
        status: import("@prisma/client").$Enums.DeviceStatus;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        eventId: string | null;
        deviceType: import("@prisma/client").$Enums.DeviceType;
        deviceId: string;
        locationName: string;
        locationLat: number | null;
        locationLng: number | null;
        firmwareVersion: string;
        batteryLevel: number;
        signalStrength: number;
        isOnline: boolean;
        ownerId: string;
        configuration: Prisma.JsonValue;
        lastSeen: Date;
        healthData: Prisma.JsonValue | null;
    }>;
    update(id: string, dto: UpdateDeviceDto): Promise<{
        name: string;
        status: import("@prisma/client").$Enums.DeviceStatus;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        eventId: string | null;
        deviceType: import("@prisma/client").$Enums.DeviceType;
        deviceId: string;
        locationName: string;
        locationLat: number | null;
        locationLng: number | null;
        firmwareVersion: string;
        batteryLevel: number;
        signalStrength: number;
        isOnline: boolean;
        ownerId: string;
        configuration: Prisma.JsonValue;
        lastSeen: Date;
        healthData: Prisma.JsonValue | null;
    }>;
    remove(id: string): Promise<{
        success: boolean;
    }>;
    assignEvent(id: string, eventId: string): Promise<{
        name: string;
        status: import("@prisma/client").$Enums.DeviceStatus;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        eventId: string | null;
        deviceType: import("@prisma/client").$Enums.DeviceType;
        deviceId: string;
        locationName: string;
        locationLat: number | null;
        locationLng: number | null;
        firmwareVersion: string;
        batteryLevel: number;
        signalStrength: number;
        isOnline: boolean;
        ownerId: string;
        configuration: Prisma.JsonValue;
        lastSeen: Date;
        healthData: Prisma.JsonValue | null;
    }>;
    unassignEvent(id: string): Promise<{
        name: string;
        status: import("@prisma/client").$Enums.DeviceStatus;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        eventId: string | null;
        deviceType: import("@prisma/client").$Enums.DeviceType;
        deviceId: string;
        locationName: string;
        locationLat: number | null;
        locationLng: number | null;
        firmwareVersion: string;
        batteryLevel: number;
        signalStrength: number;
        isOnline: boolean;
        ownerId: string;
        configuration: Prisma.JsonValue;
        lastSeen: Date;
        healthData: Prisma.JsonValue | null;
    }>;
}
